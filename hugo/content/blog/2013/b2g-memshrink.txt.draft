This past month has been a busy one for us in MemShrink.  Our partners have
found a number of large, non-trivial memory leaks, and we've been scrambling to
fix them in time for B2G 1.1.  In this post, I want to characterize the fixes
we've made and talk about what we're doing to avoid fire drills like this in
the future.

# Bugs found and fixed

If an app process uses too much memory, it eventually gets killed.  But if the
main process uses too much memory, eventually it uses so much memory that apps
can't load, and you have to reboot the phone.

Our partner's main testcase involved loading apps over and over for a few days.
An individual app process doesn't live for more than a few minutes in this
test, so this test only checks for memory leaks in the B2G main process.

This test exposed many bugs in both Gecko and Gaia.  They roughly break down
into a few types.

## Failing to clean up an IPC channel after process death

When we load many apps, eventually we run out of RAM and send SIGKIL to an app
process.  When this happens, we're supposed to clean up the inter-process
communication machinery associated with this dead process.  We didn't always do
this properly, which resulted in us leaking this IPC machinery.

Even worse, we'd still broadcast messages to these dead processes.  These
messages were never delivered; instead, they just piled up in the main process.

## Leaking an <iframe mozbrowser> in Gaia

<iframe mozbrowser> is the DOM element that contains an out-of-process frame.
If you leak an <iframe mozbrowser>, you end up leaking a lot of memory even if
the process is dead and we've cleaned up everything we can in Gecko.

It turns out that Gaia leaked <iframe mozbrowser>'s in many different ways.

## Leaking other objects

We identified some leaks in the main process that don't have to do with
child-process creation.  For example, in bug 889984, we found that
DOMApplication objects were leaked until their corresponding window died.  This
was particularly bad because DOMApplication objects could contain an icon
encoded as a data: URI, making the objects rather large.

title: A gentile introduction to using git for hacking on Gecko

There are a lot of git tutorials out there, but our workflow at Mozilla is different enough from the common workflows that I think a tutorial specifically for Gecko hackers is called for.

Note that this is a basic introduction.

## Cloning the repository

There are at least two incompatible git clones of Gecko.  For now, you should use the one maintained by Ehsan, because he's made it a priority to respond to developers' needs.

    $ git clone git://github.com/mozilla/mozilla-central.git

This will take a while, because it's cloning all of our branches and all of our history going back to CVS revision 1.

## Branching

My preferred workflow uses one git branch for each set of related patches.  These patches may be from one bug or from multiple bugs.  [TIMTOWTDI][], of course.

Create a new branch and switch to it.  (I like to put a bug number in my branch names, but it's not necessary.)

    $ git branch foo-12345
    $ git checkout foo-12345
    
    # Or equivalently:
    $ git checkout -b foo-12345

The `git branch` command will show us that we are, in fact, on the `foo-12345` branch.

## Making and committing changes

Let's modify a file and create a new one.

    $ echo "foo" >> README.txt
    $ echo "bar" > bar

Now `git status` and `git diff` will show you that you've made some changes.

Just like with hg, you need to tell git that you want it to track the file you just created.  Let's do that

    $ git add -N bar

We did `git add -N` instead of `git add` because I don't want to explain the git index to you right now.  It's not simple, and we don't need it yet.  We'll worry about it later.

Now run `git status` to see the difference.  If you run `git diff` now, the output will include your new file.

To commit your changes, run `git commit -a`.  Why `-a`?  Yeah, the index again.  Run `git log` and you'll se your new commit.

You can post this patch to bugzilla using [moz-git-bz][].  In this case the command would be `git bz attach -e HEAD`.

## `~/.gitconfig` and aliases

At some point (probably when you try to commit above) you'll need to set up a `~/.gitconfig` with your name and e-mail.

You can also set up aliases at that point.  git doesn't let you modify the behavior of existing commands, because that could break scripts (there's no internal plugin mechanism like there is in hg; the `git foo` plugin is simply an executable in your path which is named `git-foo`).  But you can create new commands.  Here's a `~/.gitconfig` for you to start with:

    [user]
            name = Gecko Hacker
            email = i.heart.nscomptr@mozilla.org

    [alias]
            st = status
            ca = commit -a
            lg = log --pretty=oneline
            dif = diff -U8 --patience -M -C

We already learned what the `st` and `ca` aliases do.  `lg` is like `git log` but uses only one line per commit.  `dif` is like `git diff`, except it creates a Mozilla-style diff, with eight lines of context and with file copy/move tracking.

## The index

Let's modify a file and create a new one.  Then we can run `git status`, which does what you'd expect.

    $ echo "foo" >> README.txt
    $ echo "bar" > bar
    $ git status
    # On branch foo-12345
    # Changes not staged for commit:
    #   (use "git add <file>..." to update what will be committed)
    #   (use "git checkout -- <file>..." to discard changes in working directory)
    #
    # modified:   README.txt
    #
    # Untracked files:
    #   (use "git add <file>..." to include in what will be committed)
    #
    # bar
    no changes added to commit (use "git add" and/or "git commit -a")

If you run `git diff`, you'll see the changes in README.txt, but not the new file `bar`.  That's because, just like with hg, you need to `git add bar` before git will track the new file.  So let's do that.

    $ git add bar
    $ git status
    # On branch foo-12345
    # Changes to be committed:
    #   (use "git reset HEAD <file>..." to unstage)
    #
    # new file:   bar
    #
    # Changes not staged for commit:
    #   (use "git add <file>..." to update what will be committed)
    #   (use "git checkout -- <file>..." to discard changes in working directory)
    #
    # modified:   README.txt
    #

But now if you run `git diff` again, you still won't see our new file `bar` in there.  Why is this?

The explanation has everything to do with the *index*.  I think the index is intended to make git easier to use, although I'm not sure it accomplishes that goal, so bear with me here.  You see hints of the index in the `git status` output above: Notice that `bar` went from "Untracked files" to "Changes to be committed".  "Changes to be committed" shows you what's currently in the index.

You can think of the index as an ephemeral commit.  When you run `git commit`, git transforms the index into a real commit and gives it a commit message and other metadata.  You can add changes to the index by running `git add`.  By `git add`'ing `bar`, we not only told git that we'd like it to track the file, but we also added it to the index.

To commit your changes, run `git commit -a`.

Why `-a`?  git has this weird thing called the *index*.  I think it's an attempt at being user-friendly, but it often gets in the way, especially at first.  `-a` tells git to commit everything, even if it's not in the index, which is what you want at first.

[TIMTOWTDI]: http://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it 
[moz-git-tools]: https://github.com/jlebar/moz-git-tools

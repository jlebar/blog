title: Easily deleting unwanted blobs in a git repo
date: 2013-05-09 2:00
uuid: urn:uuid:d4133164-b86d-11e2-a9c5-782bcb9cb190

Git is (rightly so) conservative about deleting your data.  Git will hang on to a commit's data even after you've "erased" it via git reset or git rebase, just in case you want to get it back later.

This is handy, but it can also be annoying if you accidentally committed a large change and now want to delete it.  (Perhaps you're me and you did `git add` instead of `git annex add` and added 130gb of data to your repository.)

It's not hard to find sequences of arcane git commands which will supposedly purge your repository of unused blobs.  But these commands are slow on large repositories, and good luck finding an incantation that actually deletes your files.

Here's a quick and dirty way to do it that I [discovered][]:

    $ git clone --no-hardlinks --no-local path/to/repo

Check the size of your new `.git` directory, and if you're happy with it, delete the old clone.

Together `--no-local` and `--no-hardlinks` seem to force git to transfer only the data the new clone needs, instead of hardlinking or copying the old packfiles.  If you see people suggesting using a `file:///` path, that's equivalent to `--no-local`.

[discovered]: http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
